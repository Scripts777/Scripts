-- Diagnostic Script for Grow a Garden Pet Visibility
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to log detailed information about a tool
local function logToolDetails(tool, context)
    print("=== Debugging Tool: " .. tool.Name .. " (" .. context .. ") ===")
    
    -- Check Age attribute or property
    local ageAttribute = tool:GetAttribute("Age")
    print("Age Attribute: " .. (ageAttribute and tostring(ageAttribute) or "Not found"))
    if tool:FindFirstChild("Age") then
        print("Age Property: " .. tostring(tool.Age))
    else
        print("Age Property: Not found")
    end

    -- Log tool hierarchy
    print("Tool Hierarchy:")
    local function inspectObject(obj, indent)
        indent = indent or 0
        local indentStr = string.rep("  ", indent)
        print(indentStr .. obj.ClassName .. ": " .. obj.Name)
        if obj:IsA("BasePart") then
            print(indentStr .. "  Transparency: " .. obj.Transparency)
            print(indentStr .. "  CanCollide: " .. tostring(obj.CanCollide))
            print(indentStr .. "  Anchored: " .. tostring(obj.Anchored))
            print(indentStr .. "  Position: " .. tostring(obj.Position))
            print(indentStr .. "  CFrame: " .. tostring(obj.CFrame))
        end
        for _, child in pairs(obj:GetChildren()) do
            inspectObject(child, indent + 1)
        end
    end
    inspectObject(tool)

    -- Check for scripts
    local scripts = {}
    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("BaseScript") then
            table.insert(scripts, obj)
        end
    end
    print("Scripts Found: " .. #scripts)
    for i, script in ipairs(scripts) do
        print("  Script " .. i .. ": " .. script.Name .. " (" .. script.ClassName .. ")")
    end

    -- Check for PrimaryPart in Models
    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("Model") then
            print("Model: " .. obj.Name .. " PrimaryPart: " .. (obj.PrimaryPart and obj.PrimaryPart.Name or "None"))
        end
    end
end

-- Function to clone and test a pet
local function testPetClone(player)
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then
        print("No Backpack found for player: " .. player.Name)
        return
    end

    local tools = backpack:GetChildren()
    if #tools == 0 then
        print("No tools found in " .. player.Name .. "'s Backpack")
        return
    end

    -- Clone the first tool for testing
    local tool = tools[1]
    print("Testing clone of: " .. tool.Name .. " from " .. player.Name)
    logToolDetails(tool, "Original")

    local clonedTool = tool:Clone()
    logToolDetails(clonedTool, "Cloned")

    -- Make visible and position
    for _, part in pairs(clonedTool:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0
            part.CanCollide = false
            part.Anchored = false
        elseif part:IsA("Model") and part.PrimaryPart then
            part:SetPrimaryPartCFrame(LocalPlayer.Character and LocalPlayer.Character.HumanoidRootPart and 
                LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3) or CFrame.new(0, 0, 0))
        end
    end

    -- Handle equip/unequip events
    clonedTool.Equipped:Connect(function()
        print("Tool Equipped: " .. clonedTool.Name)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = LocalPlayer.Character.HumanoidRootPart
            for _, part in pairs(clonedTool:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    part.CFrame = rootPart.CFrame * CFrame.new(0, 0, -3)
                elseif part:IsA("Model") and part.PrimaryPart then
                    part:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 0, -3))
                end
            end
        end
        logToolDetails(clonedTool, "Equipped")
    end)

    clonedTool.Unequipped:Connect(function()
        print("Tool Unequipped: " .. clonedTool.Name)
        logToolDetails(clonedTool, "Unequipped")
    end)

    clonedTool.Parent = LocalPlayer.Backpack
    print("Cloned tool added to local player's Backpack")
end

-- Test with another player's tool
local function startDebug()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player:FindFirstChild("Backpack") then
            testPetClone(player)
            break -- Test with one player for simplicity
        end
    end
end

-- Run the debug
startDebug()

-- Monitor Backpack changes for further debugging
LocalPlayer.Backpack.ChildAdded:Connect(function(child)
    if child:IsA("Tool") then
        print("New tool added to local Backpack: " .. child.Name)
        logToolDetails(child, "New Tool")
    end
end)
